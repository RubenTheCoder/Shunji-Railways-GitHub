name: "âœ… Code Checklist"
description: "Used to keep track of code upload requirements"
title: "[âœ… Checklist] (Add title here)"
labels: ["ðŸ§ª Test"]
projects: ["RubenTheCoder/4"]
body:
  - type: markdown
    attributes:
      value: |
        Thanks for helping us maintain our code standards
  - type: input
    attributes:
      label: Which issue or issues is this checklist for
      description: Add the ID and the name of the issue's
      placeholder: Add issues here ('Example issue #51', 'Example issue #75')
  - type: markdown
    attributes:
      value: |
        ---
        ### Keep track if your code conforms to our quality here
        
        <br>
        
        #### Modular code
        - [ ] **DRY** - Repeated code functionality is moved to functions and modules, instead of writing it twice.
        - [ ] **Single responsibility** - Functions, variabels and modules should only serve one purpose.
        - [ ] **MVC** - Data, styling and logic are seperated in different files.
        - [ ] **Single point of truth** - A variable may only occur in one place.
        - [ ] **Composition over inheritance** - Avoid inherticance and duplication by composing objects and arrays.
        - [ ] **Cohesion** - Keep simular functions close to each other.
        - [ ] **Information hiding** - Prevent global changes to code by keeping code modular and independant.
        - [ ] **Code flow** - Avoid complex logic flows and loops.
        - [ ] **LoD** - Modules and functions should not know about the inner works of other modules or functions.
        - [ ] **Data scope** - Keep the scope of data as low as possible.

        <br>

        #### Readable code
        - [ ] **KISS** - Write code in a more simple way instead of compact.
        - [ ] **Searchability** - Sort and organize code, and document it so it easy to find.
        - [ ] **Consistency** - Code follow consistent naming and format.
        - [ ] **Comments** - Comment on code, but only when needed.

        <br>

        #### Project maintainability
        - [ ] **YAGNI** - Add only features required for the moment, and not for later.
        - [ ] **Avoid premature optimization** - Code only what is needed at the moment.
        - [ ] **Security** - Prevent security weaknesses in the code early on.
        - [ ] **Defensive programming** - Always scan and clean user input.
        - [ ] **Galls law** - Complex systems are build up from working simple systems

        <br>
        
        #### Google styleguide
        - [ ] [Open Google styleguide](https://google.github.io/styleguide/)
        
        ---
